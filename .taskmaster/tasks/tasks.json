{
  "master": {
    "tasks": [
      {
        "id": "1",
        "title": "Initialize Elm Project Structure",
        "description": "Set up the Elm project with the specified directory structure, elm.json configuration, and basic Main.elm entry point.",
        "details": "Create the src/ directory with subdirectories as outlined (Main.elm, Types.elm, State.elm, Update.elm, View/ with submodules, Api.elm, Ports.elm, Utils/). Configure elm.json with dependencies like elm/browser, elm/core, elm/html, elm/http, elm/json, elm/url. Initialize Main.elm with basic Elm Architecture setup: init, update, view, subscriptions functions. Use elm init to create the project.",
        "testStrategy": "Verify Elm compiles without errors using elm make. Check that the basic app renders a placeholder UI in the browser.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Run elm init to create the project",
            "description": "Execute the elm init command to initialize a new Elm project in the current directory, setting up the basic project structure and elm.json file.",
            "dependencies": [],
            "details": "Open a terminal in the project root directory and run 'elm init'. This will create the initial elm.json file and set up the project for Elm development. Ensure Elm is installed and accessible via command line.",
            "status": "pending",
            "testStrategy": "Verify that elm.json is created and the command runs without errors.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Create the src/ directory structure",
            "description": "Set up the specified directory structure under src/, including subdirectories and placeholder files for the Elm modules.",
            "dependencies": [
              1
            ],
            "details": "Create the src/ directory if not already present. Inside src/, create subdirectories and files as follows: Main.elm, Types.elm, State.elm, Update.elm, View/ (with submodules like Layout.elm), Api.elm, Ports.elm, Utils/. Use mkdir and touch commands or an IDE to create these. Ensure the structure matches the outlined requirements.",
            "status": "pending",
            "testStrategy": "Check that all directories and files exist in the correct hierarchy using ls or file explorer.",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Configure elm.json with dependencies",
            "description": "Update elm.json to include the necessary Elm packages for the project, such as elm/browser, elm/core, elm/html, elm/http, elm/json, and elm/url.",
            "dependencies": [
              1
            ],
            "details": "Edit the elm.json file generated by elm init. Add the specified dependencies to the 'dependencies' section, ensuring correct versions. Run 'elm install' for each package to fetch them. This sets up the project with required libraries for browser interaction, HTML rendering, HTTP requests, JSON handling, and URL parsing.",
            "status": "pending",
            "testStrategy": "Run 'elm make' to ensure all dependencies resolve without errors and the project compiles.",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Initialize Main.elm with basic Elm Architecture",
            "description": "Implement the basic Elm Architecture in Main.elm, including init, update, view, and subscriptions functions.",
            "dependencies": [
              2
            ],
            "details": "In src/Main.elm, define the Model type, Msg type, init function to initialize the model, update function to handle messages, view function to render HTML, and subscriptions function (initially returning Sub.none). Use elm/browser's Browser.element or similar for the main program. Include basic imports from elm/html and other modules.",
            "status": "pending",
            "testStrategy": "Compile the project with 'elm make' and check for no type errors. Optionally, run a basic app to ensure it renders without crashing.",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Verify project setup and basic rendering",
            "description": "Test the complete setup by compiling the project and ensuring the basic app renders a placeholder UI in the browser.",
            "dependencies": [
              3,
              4
            ],
            "details": "Run 'elm make src/Main.elm' to compile the project. If using a build tool, integrate it. Open the generated HTML in a browser to verify a basic UI renders. Ensure no compilation errors and the app starts without issues, displaying a simple placeholder like 'Hello, Elm!' or an empty layout.",
            "status": "pending",
            "testStrategy": "Use 'elm make' for compilation checks. Manually test in browser for rendering. Check console for errors.",
            "parentId": "undefined"
          }
        ],
        "complexity": 2,
        "recommendedSubtasks": 0,
        "expansionPrompt": "",
        "updatedAt": "2025-10-16T20:05:50.682Z"
      },
      {
        "id": "2",
        "title": "Define Core Types and Model",
        "description": "Implement the core Elm types including Model, Msg, Task, Status, Priority, Filters, and other aliases as specified.",
        "details": "In Types.elm, define type aliases for Model with all fields (project, tasks, prds, stats, etc.), Msg union type with all variants (DataLoaded, TaskSelected, etc.), and data types like Task with id, title, status, priority, subtasks, etc. Ensure type safety for all statuses and priorities. Use Elm's type system to enforce immutability.",
        "testStrategy": "Use elm-test to verify type definitions compile and basic model initialization works. Test JSON decoders for Task and other types with sample data.",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Status and Priority Types",
            "description": "Create custom types for Status and Priority to ensure type safety and immutability in the Elm application.",
            "dependencies": [],
            "details": "In Types.elm, define Status as a union type with variants like Pending, InProgress, Completed, etc. Define Priority as High, Medium, Low. Use Elm's type system to prevent invalid assignments and enforce immutability across the codebase.",
            "status": "pending",
            "testStrategy": "Unit test with elm-test to verify that only valid Status and Priority values can be created and compared.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Define Task Data Type",
            "description": "Implement the Task type with all required fields including id, title, status, priority, subtasks, and other properties.",
            "dependencies": [
              1
            ],
            "details": "In Types.elm, define Task as a record type with fields: id (Int), title (String), description (String), status (Status), priority (Priority), subtasks (List Task), dependencies (List Int), details (String), and any other specified fields. Ensure subtasks are recursively defined for hierarchical structure.",
            "status": "pending",
            "testStrategy": "Use elm-test to create sample Task instances and verify that the type compiles correctly, including nested subtasks.",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Define Model Type Alias",
            "description": "Create the Model type alias encompassing all necessary fields like project, tasks, prds, stats, etc.",
            "dependencies": [
              2
            ],
            "details": "In Types.elm, define Model as a type alias for a record containing project (Project), tasks (List Task), prds (List PRD), stats (Stats), filters (Filters), and other fields as specified. Ensure the Model integrates with the defined Task type and maintains immutability.",
            "status": "pending",
            "testStrategy": "Test basic model initialization with elm-test to ensure the record can be created and accessed without compilation errors.",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Define Msg Union Type",
            "description": "Implement the Msg union type with all variants such as DataLoaded, TaskSelected, FilterChanged, etc.",
            "dependencies": [
              3
            ],
            "details": "In Types.elm, define Msg as a union type with variants like DataLoaded (Result Error Model), TaskSelected (Int), TaskUpdated (Task), FilterChanged (Filters), SearchUpdated (String), and others as needed. Ensure each variant carries appropriate data for updating the Model.",
            "status": "pending",
            "testStrategy": "Unit test with elm-test to verify that Msg variants can be constructed and pattern-matched correctly in update logic.",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Define Additional Aliases and Ensure Type Safety",
            "description": "Add remaining type aliases like Filters, Project, PRD, Stats, and verify overall type safety across the module.",
            "dependencies": [
              4
            ],
            "details": "In Types.elm, define Filters as a record with status (Maybe Status), priority (Maybe Priority), search (String). Define Project, PRD, Stats as appropriate records or types. Review all definitions to ensure type safety, immutability, and compatibility with Elm's type system.",
            "status": "pending",
            "testStrategy": "Compile the module and run elm-test on decoders to ensure types decode JSON correctly and maintain safety.",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 0,
        "expansionPrompt": "",
        "updatedAt": "2025-10-16T20:06:42.250Z"
      },
      {
        "id": "3",
        "title": "Implement API Decoders and HTTP Requests",
        "description": "Create decoders for all API endpoints and implement HTTP requests in Api.elm.",
        "details": "Use elm/json to create decoders for project, tasks, prds, stats, and prd content. Implement functions like getProject, getTasks, getPRDs, etc., using Http.get with the decoders. Handle errors with Result types. Ensure endpoints match existing ones: /api/project, /api/tasks, etc.",
        "testStrategy": "Unit test decoders with elm-test using mock JSON responses. Integration test by making actual HTTP requests in a test environment.",
        "priority": "high",
        "dependencies": [
          "2"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create JSON Decoders for API Endpoints",
            "description": "Develop Elm JSON decoders using elm/json for project, tasks, prds, stats, and prd content endpoints.",
            "dependencies": [],
            "details": "In Api.elm, define decoders for each API response type: projectDecoder, tasksDecoder, prdsDecoder, statsDecoder, and prdContentDecoder. Ensure decoders handle nested structures and optional fields appropriately. Use Json.Decode.map and other combinators to build robust decoders that match the expected JSON schema from endpoints like /api/project, /api/tasks, etc.",
            "status": "pending",
            "testStrategy": "Unit test each decoder with elm-test using mock JSON responses to verify correct parsing and error handling for invalid data.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement HTTP Request Functions with Error Handling",
            "description": "Create HTTP request functions for fetching data from API endpoints, integrating the decoders and handling errors.",
            "dependencies": [
              1
            ],
            "details": "In Api.elm, implement functions such as getProject, getTasks, getPRDs, getStats, and getPRDContent using Http.get with the corresponding decoders. Wrap responses in Result types to handle both success and error cases, including network errors and decoding failures. Ensure endpoints match existing ones: /api/project, /api/tasks, etc., and use appropriate HTTP methods.",
            "status": "pending",
            "testStrategy": "Integration test by making actual HTTP requests in a test environment to verify correct data fetching and error handling.",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 2,
        "expansionPrompt": "Break this task into subtasks for creating JSON decoders for each endpoint (project, tasks, prds, stats, prd content) and implementing HTTP request functions with error handling.",
        "updatedAt": "2025-10-16T20:15:22.364Z"
      },
      {
        "id": "4",
        "title": "Set Up Basic View Rendering and Layout",
        "description": "Implement the main layout structure in View/Layout.elm and basic rendering for the application.",
        "details": "Create Layout.elm to structure the HTML with header, sidebar, main content area. Use elm/html for rendering. Integrate with Main.elm's view function. Preserve dark theme and responsive layout from existing CSS. Include placeholders for task list, detail panel, etc.",
        "testStrategy": "Render the app and verify layout matches the existing UI structure. Check responsiveness on different screen sizes.",
        "priority": "medium",
        "dependencies": [
          "1",
          "2"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Layout.elm Module",
            "description": "Initialize the View/Layout.elm file with basic Elm module structure and imports.",
            "dependencies": [],
            "details": "Start by creating the Layout.elm file in the View directory. Import necessary modules such as Html, Html.Attributes, and any custom types from Types.elm. Set up the module declaration and ensure it compiles without errors.",
            "status": "pending",
            "testStrategy": "Compile the Elm project and verify that Layout.elm is recognized without syntax errors.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Define Layout Structure with Header, Sidebar, and Main Content",
            "description": "Implement the HTML structure for the layout including header, sidebar, and main content area using elm/html.",
            "dependencies": [
              1
            ],
            "details": "In Layout.elm, define a function to render the overall layout. Use Html.div with appropriate classes or attributes to create sections for header, sidebar, and main content. Ensure the structure is semantic and ready for styling.",
            "status": "pending",
            "testStrategy": "Render the layout in the browser and inspect the HTML structure to confirm header, sidebar, and main content areas are present.",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Integrate Layout with Main.elm View Function",
            "description": "Update Main.elm to use the Layout module in its view function for rendering the application.",
            "dependencies": [
              2
            ],
            "details": "Modify Main.elm's view function to call the layout rendering function from Layout.elm, passing the model and any necessary parameters. Ensure the integration preserves the Elm Architecture and allows for dynamic content rendering.",
            "status": "pending",
            "testStrategy": "Run the application and verify that the layout is displayed correctly in the browser, with no compilation errors.",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Preserve Dark Theme and Responsive Layout",
            "description": "Apply existing CSS classes and attributes to maintain the dark theme and responsive design in the layout.",
            "dependencies": [
              2
            ],
            "details": "In Layout.elm, add CSS classes or inline styles that match the existing dark theme (e.g., background colors, text colors). Implement responsive design using media queries or flexbox/grid to ensure the layout adapts to different screen sizes, referencing the existing CSS.",
            "status": "pending",
            "testStrategy": "Test the layout on various screen sizes (desktop, tablet, mobile) and in different browsers to ensure responsiveness and dark theme consistency.",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Add Placeholders for Task List, Detail Panel, and Other Components",
            "description": "Insert placeholder elements in the layout for future components like task list and detail panel.",
            "dependencies": [
              2
            ],
            "details": "Within the main content area of the layout, add Html.div elements with placeholder text or comments for the task list, detail panel, and any other specified areas. Ensure these placeholders are clearly marked and can be easily replaced with actual components later.",
            "status": "pending",
            "testStrategy": "Render the app and visually confirm that placeholders are visible in the correct layout sections, with appropriate labels or comments.",
            "parentId": "undefined"
          }
        ],
        "complexity": 4,
        "recommendedSubtasks": 0,
        "expansionPrompt": "",
        "updatedAt": "2025-10-16T20:16:34.781Z"
      },
      {
        "id": "5",
        "title": "Implement Task List and Hierarchical Rendering",
        "description": "Build TaskList.elm for rendering the hierarchical task tree with expand/collapse functionality.",
        "details": "In TaskList.elm, create functions to render tasks recursively, handling subtasks. Use Set for expandedTasks to track state. Implement expand/collapse logic in Update.elm. Preserve UI elements like arrows (▶/▼) and badge styling for status/priority.",
        "testStrategy": "Test rendering with sample task data. Verify expand/collapse preserves state and handles hierarchical logic correctly.",
        "priority": "medium",
        "dependencies": [
          "2",
          "4"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Recursive Task Rendering in TaskList.elm",
            "description": "Create functions in TaskList.elm to render tasks and their subtasks recursively, including UI elements like arrows and badge styling.",
            "dependencies": [],
            "details": "Develop a recursive view function that takes a task and renders it with its subtasks if expanded. Use Html elements to display task title, status, priority badges, and expand/collapse arrows (▶/▼). Ensure the rendering handles hierarchical structure properly.",
            "status": "pending",
            "testStrategy": "Test with sample task data to verify correct rendering of nested subtasks and UI elements.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Add Expand/Collapse State Management in Update.elm",
            "description": "Implement logic in Update.elm to handle expand/collapse messages, using a Set to track expanded task IDs.",
            "dependencies": [],
            "details": "Add Msg variants for ExpandTask and CollapseTask. In the update function, modify the expandedTasks Set accordingly. Ensure the state persists across updates and integrates with the recursive rendering.",
            "status": "pending",
            "testStrategy": "Verify that expanding and collapsing tasks updates the UI correctly and preserves state across interactions.",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 2,
        "expansionPrompt": "Break this task into subtasks for implementing recursive rendering of tasks and subtasks, and adding expand/collapse state management in Update.elm.",
        "updatedAt": "2025-10-16T20:20:12.641Z"
      },
      {
        "id": "6",
        "title": "Add Task Selection and Detail Panel",
        "description": "Implement task selection logic and TaskDetail.elm for displaying comprehensive task information.",
        "details": "Update Update.elm to handle TaskSelected Msg, updating selectedTask in Model. In TaskDetail.elm, render task details including subtasks with expand/collapse in the panel. Use expandedSubtasksInDetail Set. Ensure subtask expansion in detail view is independent of list view.",
        "testStrategy": "Select tasks and verify detail panel updates correctly. Test subtask expansion in detail panel without affecting list view.",
        "priority": "medium",
        "dependencies": [
          "5"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Model for Task Selection Fields",
            "description": "Add selectedTask (Maybe TaskId) and expandedSubtasksInDetail (Set TaskId) fields to the Model type in Types.elm to support task selection and independent subtask expansion in the detail panel.",
            "dependencies": [],
            "details": "Modify the Model type alias in Types.elm to include selectedTask as Maybe TaskId and expandedSubtasksInDetail as Set TaskId. Ensure these fields are initialized appropriately in the init function, with selectedTask set to Nothing and expandedSubtasksInDetail as an empty Set.",
            "status": "pending",
            "testStrategy": "Compile the Elm code and verify that the model initializes without type errors, checking that the new fields are accessible.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Add TaskSelected Message to Msg Union Type",
            "description": "Extend the Msg union type in Types.elm to include a TaskSelected variant for handling task selection events.",
            "dependencies": [],
            "details": "Add TaskSelected (Maybe TaskId) to the Msg union type in Types.elm. This allows the application to dispatch messages when a task is selected or deselected, passing the task ID or Nothing.",
            "status": "pending",
            "testStrategy": null,
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement TaskSelected Handler in Update.elm",
            "description": "Update the update function in Update.elm to handle the TaskSelected Msg, updating the selectedTask field in the model.",
            "dependencies": [
              1,
              2
            ],
            "details": "In Update.elm, add a case for TaskSelected msg in the update function. Set model.selectedTask to msg. If deselecting (msg is Nothing), optionally reset expandedSubtasksInDetail to an empty Set to clear any expanded subtasks in the detail view.",
            "status": "pending",
            "testStrategy": "Unit test the update function by simulating TaskSelected messages and verifying that the model's selectedTask field updates correctly.",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Create TaskDetail.elm Module for Detail Panel",
            "description": "Create a new TaskDetail.elm module to define the view function for rendering the task detail panel.",
            "dependencies": [
              1
            ],
            "details": "Create TaskDetail.elm in the appropriate directory. Define a viewTaskDetail function that takes the Model and returns Html Msg, rendering the selected task's details such as title, description, status, priority, and a list of subtasks if a task is selected.",
            "status": "pending",
            "testStrategy": "Render the TaskDetail view in a test setup and manually verify that it displays basic task information when a task is selected.",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Implement Expand/Collapse for Subtasks in TaskDetail",
            "description": "Add expand/collapse functionality for subtasks in the TaskDetail view, ensuring it uses expandedSubtasksInDetail and is independent of the list view.",
            "dependencies": [
              3,
              4
            ],
            "details": "In TaskDetail.elm, add toggle buttons for subtasks. Introduce a new Msg like ToggleSubtaskExpansionInDetail TaskId. Update Update.elm to handle this Msg, toggling the TaskId in expandedSubtasksInDetail Set. Render subtasks conditionally based on this Set, with expand/collapse icons. Ensure this logic does not affect any list view expansions.",
            "status": "pending",
            "testStrategy": "Test selecting a task, expanding/collapsing subtasks in the detail panel, and verify that the list view's expansions remain unchanged.",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 0,
        "expansionPrompt": "",
        "updatedAt": "2025-10-16T20:21:09.996Z"
      },
      {
        "id": "7",
        "title": "Implement Filtering and Search Functionality",
        "description": "Add filtering by status, priority, and real-time search in Sidebar.elm and Utils/Task.elm.",
        "details": "In Utils/Task.elm, create filter functions for status, priority, and text search. Implement hierarchical filtering logic: show parent if it matches, or if any subtask matches. Update Update.elm for FilterChanged and SearchUpdated Msgs. Combine filters with AND logic.",
        "testStrategy": "Unit test filter functions with various task hierarchies. Manual test combined filters and search to ensure correct task visibility.",
        "priority": "medium",
        "dependencies": [
          "2",
          "5"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Filter Functions in Utils/Task.elm",
            "description": "Create filter functions for status, priority, and text search, including hierarchical filtering logic where a parent task is shown if it matches or if any subtask matches.",
            "dependencies": [
              2
            ],
            "details": "In Utils/Task.elm, define functions like filterByStatus, filterByPriority, and searchByText. Implement hierarchical logic to check matches recursively through subtasks. Combine filters using AND logic for multiple criteria. Ensure performance by avoiding unnecessary traversals.",
            "status": "pending",
            "testStrategy": "Unit test each filter function with mock task hierarchies, including edge cases like empty subtasks and deep nesting.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Update Update.elm for Filter and Search Message Handling",
            "description": "Update Update.elm to handle FilterChanged and SearchUpdated messages, integrating the filter functions into the model updates and UI logic.",
            "dependencies": [
              1,
              5
            ],
            "details": "In Update.elm, add cases for FilterChanged and SearchUpdated in the update function. Apply the filter functions from Utils/Task.elm to update the visible tasks in the model. Ensure real-time updates in Sidebar.elm by triggering re-renders on filter changes. Combine with existing task list rendering logic.",
            "status": "pending",
            "testStrategy": "Manual testing of filter and search inputs in the UI, verifying that tasks are correctly shown/hidden based on combined filters and hierarchical matches.",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 2,
        "expansionPrompt": "Break this task into subtasks for creating filter functions in Utils/Task.elm (status, priority, text search with hierarchical logic) and updating Update.elm for message handling and UI integration.",
        "updatedAt": "2025-10-16T20:23:18.398Z"
      },
      {
        "id": "8",
        "title": "Build PRD Viewer with Markdown Rendering",
        "description": "Implement PRDList.elm and PRDViewer.elm for browsing and displaying PRD documents.",
        "details": "In PRDList.elm, render list of PRD documents. In PRDViewer.elm, load content via API and render plain text or markdown. Use Ports.elm for markdown rendering: port renderMarkdown and markdownRendered. Preserve syntax highlighting for plain text.",
        "testStrategy": "Load PRD files and verify content displays correctly. Test markdown rendering via ports with marked.js on JS side.",
        "priority": "medium",
        "dependencies": [
          "3",
          "4"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement PRDList.elm for Document Listing",
            "description": "Create PRDList.elm to render a list of PRD documents, allowing users to browse and select documents for viewing.",
            "dependencies": [],
            "details": "In PRDList.elm, define the view function to display a list of PRD documents fetched from the API. Include clickable items for each document, and handle selection to trigger navigation to the viewer. Ensure the list is scrollable and styled appropriately within the application layout.",
            "status": "pending",
            "testStrategy": "Test the list rendering with mock PRD data to verify correct display and selection functionality.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement PRDViewer.elm for Content Loading and Rendering",
            "description": "Develop PRDViewer.elm to load PRD content via API and render it as plain text or markdown, using ports for markdown rendering.",
            "dependencies": [],
            "details": "In PRDViewer.elm, implement functions to fetch content using the API decoders, and render plain text with syntax highlighting or markdown via Ports.elm. Use port renderMarkdown to send content to JavaScript and subscribe to markdownRendered for processed HTML. Handle loading states and errors gracefully.",
            "status": "pending",
            "testStrategy": "Test content loading with API mocks and verify markdown rendering through ports, ensuring plain text preserves syntax highlighting.",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 2,
        "expansionPrompt": "Break this task into subtasks for implementing PRDList.elm for listing documents and PRDViewer.elm for loading and rendering content with ports for markdown.",
        "updatedAt": "2025-10-16T20:27:35.819Z"
      },
      {
        "id": "9",
        "title": "Integrate Advanced Features: Stats, Context Bar, Hot Reload",
        "description": "Add Statistics dashboard, Context Bar with git info, and SSE hot reloading.",
        "details": "Implement Stats.elm for dashboard with task counts by status/priority/tag. Add context bar in Header.elm with project path, git info, tag, port. Set up Ports.elm for SSE: setupSSE and sseMessageReceived. Handle HotReloadEvent to reload data while preserving state (selectedTask, expanded sets, scroll positions).",
        "testStrategy": "Verify stats update on data load. Test hot reload preserves view state. Check context bar displays correct info.",
        "priority": "medium",
        "dependencies": [
          "3",
          "6",
          "7",
          "8"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Statistics Dashboard in Stats.elm",
            "description": "Create a new Stats.elm module to build a dashboard displaying task counts grouped by status, priority, and tag. This involves defining the view function to render charts or lists based on the stats data from the model.",
            "dependencies": [],
            "details": "In Stats.elm, define a view function that takes the stats data and renders a dashboard with sections for status counts (e.g., pending, done), priority counts (high, medium, low), and tag counts. Use Elm's Html module for rendering. Ensure the dashboard updates dynamically when data loads. Integrate this view into the main application layout, perhaps as a tab or section in the UI.",
            "status": "pending",
            "testStrategy": "Verify that the dashboard displays correct counts after loading sample data, and check that it updates when tasks are added or modified.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Add Context Bar to Header.elm",
            "description": "Modify Header.elm to include a context bar that shows project path, git information, current tag, and port details. This enhances the header with contextual information for the user.",
            "dependencies": [],
            "details": "Update the Header.elm module to add a new context bar section below or within the existing header. Fetch and display project path, git branch/commit info, tag, and port from the model or via ports if needed. Use Html elements to style the bar appropriately, ensuring it fits the overall UI design. Handle cases where git info might not be available.",
            "status": "pending",
            "testStrategy": "Check that the context bar appears in the header and displays accurate project path, git info, tag, and port when the app loads.",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Set Up SSE Ports for Hot Reloading with State Preservation",
            "description": "Configure Ports.elm to handle Server-Sent Events (SSE) for hot reloading, including setupSSE and sseMessageReceived ports, and implement logic to reload data while preserving UI state like selectedTask, expanded sets, and scroll positions.",
            "dependencies": [],
            "details": "In Ports.elm, define ports for setupSSE (to initiate SSE connection) and sseMessageReceived (to receive messages). In the Elm application, subscribe to sseMessageReceived and handle HotReloadEvent by reloading tasks, prds, and stats data via API calls, but preserve state fields like selectedTask, expanded task sets, and scroll positions in the model. Use Elm's subscriptions and update functions to manage this without resetting the view state.",
            "status": "pending",
            "testStrategy": "Test that upon receiving an SSE message, data reloads in the background, the UI updates with new data, and elements like selected tasks, expanded sections, and scroll positions remain unchanged.",
            "parentId": "undefined"
          }
        ],
        "complexity": 7,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break this task into subtasks for implementing Stats.elm dashboard, adding context bar in Header.elm, and setting up SSE ports for hot reloading with state preservation.",
        "updatedAt": "2025-10-16T20:30:47.574Z"
      },
      {
        "id": "10",
        "title": "Polish, Optimize, and Set Up Build Pipeline",
        "description": "Integrate CSS, add error handling, optimize performance, and configure production builds.",
        "details": "Integrate existing custom CSS for dark theme. Add loading states and error handling in views. Optimize JSON decoders and rendering. Set up build scripts in package.json: elm:dev, elm:prod, build with terser, package:binary with pkg. Ensure binary distribution for multiple platforms.",
        "testStrategy": "Performance test load times and memory usage. Test binaries on different platforms. Verify CSS integration preserves UI/UX.",
        "priority": "low",
        "dependencies": [
          "9"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Integrate Custom CSS and Add Error Handling/Loading States",
            "description": "Integrate the existing custom CSS for the dark theme into the Elm application views. Add loading states such as spinners or placeholders in the task list and detail panels. Implement error handling to display user-friendly error messages when API requests fail or data loading encounters issues. Ensure the UI preserves the dark theme and responsiveness.",
            "dependencies": [],
            "details": "In the Elm views (e.g., Layout.elm, TaskList.elm), import and apply the custom CSS classes for the dark theme. Add conditional rendering for loading states using Maybe or Result types in the model. For error handling, update the update function to handle error messages from API calls and display them in the UI. Test that the integration does not break existing layouts and maintains performance.",
            "status": "pending",
            "testStrategy": "Manually test UI rendering with loading and error states. Verify CSS integration by checking theme consistency across views. Use browser dev tools to ensure no CSS conflicts.",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Configure Build Scripts and Binary Packaging",
            "description": "Set up build scripts in package.json for development and production Elm builds, including minification with terser. Configure binary packaging using pkg to create distributable binaries for multiple platforms like Windows, macOS, and Linux. Ensure the build process optimizes the Elm code and includes all necessary dependencies.",
            "dependencies": [],
            "details": "Add scripts to package.json: 'elm:dev' for development builds using elm make with debug flags, 'elm:prod' for production builds with elm make --optimize and terser for minification. Set up 'package:binary' script using pkg to bundle the Elm app into executables for different platforms. Update the build process to handle Elm optimizations and ensure cross-platform compatibility by testing on target environments.",
            "status": "pending",
            "testStrategy": "Run build scripts and verify output sizes and functionality. Test generated binaries on Windows, macOS, and Linux to ensure they run correctly and perform as expected. Measure build times and check for any errors in the process.",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 2,
        "expansionPrompt": "Break this task into subtasks for integrating CSS and adding error handling/loading states, and configuring build scripts and binary packaging for production.",
        "updatedAt": "2025-10-16T20:35:56.792Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastModified": "2025-10-16T20:35:56.793Z",
      "taskCount": 10,
      "completedCount": 10,
      "tags": [
        "master"
      ]
    }
  }
}